<h1>Perfil del Usuario</h1>
<p><strong>Nombre:</strong> {{first_name}}</p>
<p><strong>Apellido:</strong> {{last_name}}</p>
<p><strong>Email:</strong> {{email}}</p>
<p><strong>Edad:</strong> {{age}}</p>
<p><strong>Rol:</strong> {{role}}</p>

<h2>Productos disponibles</h2>

{{#if (eq role 'admin')}}
<div>
  <button onclick="redirectToProducts()">Agregar Producto</button>
</div>
{{/if}}
{{#if (eq role 'user')}}
<div>
  <button onclick="redirectToCart()">Ir al carrito</button>
</div>
{{/if}}

<ul>
  {{#each products}}
  <li>
    <h3>{{this.product}}</h3>
    <p>{{this.description}}</p>
    <p>Precio: ${{this.price}}</p>
    <p>Stock: {{this.stock}}</p>
    <p>Categoría: {{this.category}}</p>

    {{#if (eq ../role 'admin')}}

    <!-- Mostrar opciones para el administrador (actualizar y eliminar producto) -->
    <!-- Botón para eliminar producto -->
    <form action="/products/delete/{{this._id}}" method="POST">
      <button type="submit">Eliminar</button>
    </form>
    <!-- Botón para actualizar producto (abre un formulario) -->
    <button onclick="toggleUpdateForm('{{this._id}}')">Actualizar</button>

    <!-- Formulario oculto para actualizar producto -->
    <div id="updateForm-{{this._id}}" style="display:none;">
      <form action="/products/update/{{this._id}}" method="POST">
        <label for="product">Nombre:</label>
        <input type="text" name="product" value="{{this.product}}">

        <label for="description">Descripción:</label>
        <input type="text" name="description" value="{{this.description}}">

        <label for="price">Precio:</label>
        <input type="number" name="price" value="{{this.price}}">

        <label for="stock">Stock:</label>
        <input type="number" name="stock" value="{{this.stock}}">

        <label for="category">Categoría:</label>
        <input type="text" name="category" value="{{this.category}}">

        <button type="submit">Guardar Cambios</button>
      </form>
    </div>
    {{else}}

   <div>
    <button onclick="decreaseQuantity('{{this._id}}')">-</button>
    <span id="quantity-{{this._id}}">1</span>
    <button onclick="increaseQuantity('{{this._id}}', {{this.stock}})">+</button>
</div>

<div>
    <button onclick="addToCart('{{this._id}}', {{this.stock}})">Agregar Al Carrito</button>
</div>


    {{/if}}
  </li>
  {{/each}}
</ul>

<div>
  <button onclick="logout()">Cerrar Sesion</button>
</div>

<script>

  function logout() {
    fetch('/api/sessions/logout', {
      method: 'POST',
    })
    .then(response => {
      if (response.ok) {
        window.location.href = '/api/sessions/login'; // Redirige al login
      }
    })
    .catch(error => console.error('Error al cerrar sesión:', error));
  }

  // Función para mostrar/ocultar el formulario de actualización
  const toggleUpdateForm = (productId) => {
    const form = document.getElementById(`updateForm-${productId}`);
    form.style.display = form.style.display === 'none' ? 'block' : 'none';
  }

  const redirectToProducts = () => {
    window.location.href = "http://localhost:8080/api/sessions/products";
  }

  const redirectToCart = () => {
    window.location.href = "http://localhost:8080/api/sessions/cart";
  }

const increaseQuantity = (productId, maxStock) => {
    const quantitySpan = document.getElementById(`quantity-${productId}`);
    
    // Convertir el valor actual de cantidad en un número
    let currentQuantity = parseInt(quantitySpan.textContent);
    
    if (currentQuantity < maxStock) {
        currentQuantity++;
        quantitySpan.textContent = currentQuantity;
        document.getElementById(`inputQuantity-${productId}`).value = currentQuantity;
    } else {
        alert(`No puedes agregar más de ${maxStock} unidades de este producto.`);
    }
};

  const decreaseQuantity = (productId) => {
    const quantitySpan = document.getElementById(`quantity-${productId}`);
    let currentQuantity = parseInt(quantitySpan.textContent);
    if (currentQuantity > 1) {
      currentQuantity--;
      quantitySpan.textContent = currentQuantity;
      document.getElementById(`inputQuantity-${productId}`).value = currentQuantity; 
    }
  };


const addToCart = async (productId, maxStock) => {
    const quantity = parseInt(document.getElementById(`quantity-${productId}`).textContent); 

    // Verificar si la cantidad seleccionada es mayor que el stock disponible
    if (quantity > maxStock) {
        alert(`No puedes agregar más de ${maxStock} unidades de este producto.`);
        return;
    }

    try {
        const response = await fetch('/cart/add', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ productId, quantity }),
        });

        const data = await response.json();
        if (response.ok) {
            alert(data.message);
        } else {
            alert(data.error);
        }
    } catch (error) {
        console.error(error);
    }
};
</script>